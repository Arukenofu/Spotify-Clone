openapi: 3.1.0
info:
  title: Spotify API
  description: Spotify-Revamp backend API endpoints
  version: 1.0.0

servers:
  - url: https://localhost:5000/

#tags:
#  - name: music
#  - name: artist
#  - name: recommendations
#  - name: auth
#  - name: search
paths:
  # recommendations
  /api/recommendations:
    get:
      tags:
        - recommendations
      summary: Получить рекомендации
      description: Возвращает список рекомендаций.
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Уникальный идентификатор рекомендации
                    naming:
                      type: string
                      nullable: true
                      description: Название рекомендации
                    list:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: Уникальный идентификатор элемента
                          name:
                            type: string
                            description: Название элемента
                          image:
                            type: string
                            nullable: true
                            description: URL изображения
                          description:
                            type: string
                            nullable: true
                            description: Описание элемента
                          color:
                            type: string
                            nullable: true
                            description: Цвет, связанный с элементом
                          type:
                            type: string
                            enum:
                              - Playlist
                              - User
                              - Artist
                              - Album
                            description: Тип элемента (исключая Track)

  /api/recommendations/mixes:
    get:
      tags:
        - recommendations
      summary: Получить миксы рекомендаций
      description: Возвращает список миксов рекомендаций.
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    playlistId:
                      type: integer
                      description: Идентификатор плейлиста
                    name:
                      type: string
                      description: Название микса
                    image:
                      type: string
                      nullable: true
                      description: URL изображения микса
                    color:
                      type: string
                      description: Цвет микса

  # auth
  /api/auth/login:
    post:
      tags:
        - auth
      summary: Create new account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - isRemember
              properties:
                email:
                  type: string
                password:
                  type: string
                  minLength: 6
                  maxLength: 20
                isRemember:
                  type: boolean
                  description: 'Определяет сессионные куки парсить или нет'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Успешно вошли в систему'
        '401':
          description: 'Invalid password or login'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Неправильный пароль или логин.'
        '400':
          description: 'Invalid ${property} format'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Неправильный формат ${property}'

  /api/auth/register:
    post:
      tags:
        - auth
      summary: Log in to account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
                - day
                - month
                - year
                - gender
              properties:
                email:
                  type: string
                password:
                  type: string
                  minLength: 6
                  maxLength: 20
                username:
                  type: string
                  minLength: 4
                  maxLength: 20
                day:
                  type: number
                  minLength: 2
                  maxLength: 2
                  example: 31
                month:
                  type: string
                  enum:
                    - 'Январь'
                    - 'Февраль'
                    - 'Март'
                    - 'Апрель'
                    - 'Май'
                    - 'Июнь'
                    - 'Июль'
                    - 'Август'
                    - 'Сентябрь'
                    - 'Октябрь'
                    - 'Ноябрь'
                    - 'Декабрь'
                year:
                  type: number
                  description: 'Возраст пользователя не должно быть меньше 16 и больше 100'
                  minLength: 4
                  maxLength: 4
                gender:
                  type: string
                  enum:
                    - 'Мужчина'
                    - 'Женщина'
                    - 'Другое'
                    - 'Не хочу выбирать'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Успешно создали аккаунт'
        '400':
          description: 'Invalid value ${key}'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Поле ${key} имеет неправильный формат'

  /api/auth/checkEmail:
    post:
      tags:
        - auth
      summary: Check if email is available
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'OK'
        '409':
          description: 'Email already exists'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Email уже существует'
        '400':
          description: 'Invalid Email format'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Неправильный формат почты'

  /api/auth/checkPassword:
    post:
      tags:
        - auth
      summary: Check if password validated
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
      responses:
        '200':
          description: Password validation checks
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: boolean
                    description: Indicates if the password meets the length requirement (6)
                    example: true
                  digitSpecial:
                    type: boolean
                    description: Indicates if the password contains digits and special characters
                    example: true
                  letter:
                    type: boolean
                    description: Indicates if the password contains at least one UPPERCASE letter
                    example: true
        '400':
          description: Password validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: boolean
                    description: Indicates if the password meets the length requirement (6)
                    example: false
                  digitSpecial:
                    type: boolean
                    description: Indicates if the password contains digits and special characters
                    example: false
                  letter:
                    type: boolean
                    description: Indicates if the password contains at least one UPPERCASE letter (6)
                    example: true
                  message:
                    type: string
                    description: Error message explaining which checks failed
                    example: "Своё отдельное сообщение"

  # artist
  /api/artist/subscribe:
    post:
      tags:
        - artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                artistId:
                  type: string
              required:
                - artistId
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'OK'

  /api/artist/unsubscribe:
    delete:
      tags:
        - artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                artistId:
                  type: string
              required:
                - artistId
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'OK'

  /api/artist/{id}:
    get:
      tags:
        - artist
      summary: Получить информацию об артисте
      description: Возвращает подробную информацию об артисте по его идентификатору.
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор артиста
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '404':
          description: Артист не найден

  /api/artist/{id}/discography:
    get:
      tags:
        - artist
      summary: Получить дискографию артиста
      description: Возвращает дискографию артиста, включая альбомы, популярные треки и рекомендации.
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор артиста
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discography'
        '404':
          description: Артист не найден

  # music
  /api/music/playlist/{id}:
    get:
      tags:
        - music
      summary: Получить информацию о плейлисте
      description: Возвращает информацию о плейлисте, включая данные плейлиста и очередь треков.
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор плейлиста
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                properties:
                  playlistInfoDossier:
                    $ref: '#/components/schemas/Playlist'
                    description: Данные о плейлисте
                  playlistQueue:
                    type: array
                    items:
                      $ref: '#/components/schemas/Track'
                    description: Очередь треков в плейлисте
        '404':
          description: Плейлист не найден

  /api/music/track/{id}:
    get:
      tags:
        - music
      summary: Получить информацию о треке
      description: Возвращает информацию о треке, рекомендованные связанные треки, популярные треки артистов и другие рекомендации.
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор трека
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                properties:
                  trackInfoDossier:
                    $ref: '#/components/schemas/Track'
                    description: Данные о треке
                  recommendedRelatedTracks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Track'
                    description: Рекомендованные связанные треки
                  popularArtistsTracks:
                    type: array
                    items:
                      type: object
                      properties:
                        artistName:
                          type: string
                          description: Имя артиста
                        trackList:
                          type: array
                          items:
                            $ref: '#/components/schemas/Track'
                          description: Список популярных треков артиста
                  otherInfo:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recommendation'
                    description: Другие рекомендации для трека
        '404':
          description: Трек не найден

  # search
  /api/search:
    post:
      tags:
        - search
      summary: Поиск по запросу
      description: Выполняет поиск по запросу и возвращает лучшие результаты и связанные сущности.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: Поисковый запрос
                  example: "rock music"
      responses:
        '200':
          description: Успешный ответ с результатами поиска
          content:
            application/json:
              schema:
                type: object
                properties:
                  bestResult:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Уникальный идентификатор лучшего результата
                      title:
                        type: string
                        description: Название лучшего результата
                      image:
                        type: string
                        nullable: true
                        description: Изображение лучшего результата
                      color:
                        type: string
                        nullable: true
                        description: Цвет лучшего результата
                      type:
                        $ref: '#/components/schemas/Entities'
                        description: Тип лучшего результата (например, Playlist, Artist, etc.)
                      artists:
                        type: array
                        items:
                          $ref: '#/components/schemas/SimpleArtist'
                        description: Список артистов для лучшего результата
                  bestResultTracks:
                    type: array
                    items:
                      $ref: '#/components/schemas/SimpleTrack'
                    description: Список лучших треков, соответствующих запросу
                  entities:
                    type: object
                    properties:
                      playlists:
                        type: array
                        items:
                          $ref: '#/components/schemas/RecommendationItem'
                        description: Рекомендации для плейлистов
                      artists:
                        type: array
                        items:
                          $ref: '#/components/schemas/RecommendationItem'
                        description: Рекомендации для артистов
                      albums:
                        type: array
                        items:
                          $ref: '#/components/schemas/RecommendationItem'
                        description: Рекомендации для альбомов
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/RecommendationItem'
                        description: Рекомендации для пользователей
        '400':
          description: Некорректный запрос

  /api/searchByEntity:
    post:
      tags:
        - search
      summary: Поиск по сущности
      description: Выполняет поиск по запросу и возвращает данные в зависимости от указанной сущности.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: Поисковый запрос
                  example: "Imagine Dragons"
                entity:
                  $ref: '#/components/schemas/Entities'
                  description: Тип сущности, по которой производится поиск
      responses:
        '200':
          description: Успешный ответ с результатами поиска
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    description: Если `entity` равно `Track`, возвращает список треков
                    items:
                      $ref: '#/components/schemas/Track'
                  - type: array
                    description: В остальных случаях возвращает список RecommendationItem
                    items:
                      $ref: '#/components/schemas/RecommendationItem'
        '400':
          description: Некорректный запрос

  # history
  /api/search/history:
    get:
      tags:
        - history
      summary: Получить историю поиска
      description: Возвращает список объектов из истории поиска.
      responses:
        '200':
          description: Успешный ответ с историей поиска
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecommendationItem'
    post:
      tags:
        - history
      summary: Добавить элемент в историю поиска
      description: Добавляет новый элемент в историю поиска на основе его идентификатора и типа.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityId:
                  type: string
                  description: Уникальный идентификатор сущности
                  example: "12345"
                entityType:
                  $ref: '#/components/schemas/Entities'
                  description: Тип сущности
      responses:
        '200':
          $ref: '#/components/responses/ResponseOK'
    delete:
      tags:
        - history
      summary: Удалить элемент из истории поиска
      description: Удаляет элемент из истории поиска на основе его идентификатора и типа.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityId:
                  type: string
                  description: Уникальный идентификатор сущности
                  example: "12345"
                entityType:
                  $ref: '#/components/schemas/Entities'
                  description: Тип сущности
      responses:
        '200':
          $ref: '#/components/responses/ResponseOK'

  /api/search/history/clean:
    delete:
      tags:
        - history
      summary: Очистить всю историю поиска
      description: Удаляет все элементы из истории поиска.
      responses:
        '200':
          $ref: '#/components/responses/ResponseOK'


components:
  schemas:
    # Entities
    Entities:
      type: string
      enum:
        - Playlist
        - User
        - Artist
        - Album
        - Track
      example: "Playlist"

    SimpleArtist:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор артиста
        name:
          type: string
          description: Имя артиста
        avatar:
          type: string
          nullable: true
          description: URL аватара артиста
        type:
          type: string
          enum:
            - Artist
          description: Тип сущности (всегда 'Artist')э

    Artist:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор артиста
        profile:
          type: object
          properties:
            artistName:
              type: string
              description: Имя артиста
            avatar:
              type: string
              nullable: true
              description: URL аватара артиста
            coverImage:
              type: string
              nullable: true
              description: URL изображения обложки артиста
            color:
              type: string
              description: Основной цвет профиля артиста
            description:
              type: string
              nullable: true
              description: Описание артиста
        listenersQuantityPerMonth:
          type: integer
          description: Количество слушателей в месяц
        subscriptionsTotalQuantity:
          type: integer
          description: Общее количество подписок
        cityPlaybackData:
          type: array
          description: Данные о воспроизведениях по городам
          items:
            type: object
            properties:
              cityName:
                type: string
                description: Название города
              countryShortName:
                type: string
                description: Короткое название страны
              listenersQuantity:
                type: integer
                description: Количество слушателей в городе
        isSubscribed:
          type: boolean
          description: Признак подписки на артиста

    Album:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор альбома
        name:
          type: string
          description: Название альбома
        image:
          type: string
          nullable: true
          description: URL изображения альбома
        color:
          type: string
          nullable: true
          description: Основной цвет альбома
        description:
          type: string
          nullable: true
          description: Описание альбома
        info:
          type: object
          properties:
            uploadedDate:
              type: string
              format: date
              description: Дата загрузки альбома
            savedQuantity:
              type: integer
              description: Количество сохранений альбома
            tracksAmount:
              type: integer
              description: Количество треков в альбоме
            totalDuration:
              type: integer
              description: Общая длительность альбома (в секундах)
        creators:
          type: array
          items:
            $ref: '#/components/schemas/SimpleArtist'
          description: Список создателей альбома
        isAdded:
          type: boolean
          description: Признак добавления альбома в библиотеку

    Playlist:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор плейлиста
        name:
          type: string
          description: Название плейлиста
        image:
          type: string
          nullable: true
          description: URL изображения плейлиста
        color:
          type: string
          nullable: true
          description: Основной цвет плейлиста
        description:
          type: string
          nullable: true
          description: Описание плейлиста
        info:
          type: object
          properties:
            uploadedDate:
              type: string
              format: date
              description: Дата загрузки плейлиста
            savedQuantity:
              type: integer
              description: Количество сохранений плейлиста
            tracksAmount:
              type: integer
              description: Количество треков в плейлисте
            totalDuration:
              type: integer
              description: Общая длительность плейлиста (в секундах)
        creators:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SimpleArtist'
              - $ref: '#/components/schemas/SimpleUser'
          description: Список создателей плейлиста
        isAdded:
          type: boolean
          description: Признак добавления плейлиста в библиотеку

    SimpleTrack:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор трека
        name:
          type: string
          description: Название трека
        image:
          type: string
          nullable: true
          description: URL изображения трека
        color:
          type: string
          nullable: true
          description: Основной цвет трека
        artists:
          type: array
          items:
            $ref: '#/components/schemas/SimpleArtist'
          description: Список артистов трека
        isAddedToFavorites:
          type: boolean
          description: Признак добавления трека в избранное
        duration:
          type: integer
          description: Длительность трека (в секундах)

    Track:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор трека
        name:
          type: string
          description: Название трека
        artists:
          type: array
          items:
            $ref: '#/components/schemas/SimpleArtist'
          description: Список артистов трека
        avatar:
          type: string
          nullable: true
          description: URL аватара трека
        color:
          type: string
          nullable: true
          description: Основной цвет трека
        url:
          type: string
          description: URL аудиофайла трека
        uploadedDate:
          type: string
          format: date
          description: Дата загрузки трека
        duration:
          type: integer
          description: Длительность трека (в секундах)
        listenings:
          type: integer
          description: Количество прослушиваний трека
        isAddedToFavorites:
          type: boolean
          description: Признак добавления трека в избранное
        album:
          type: object
          properties:
            id:
              type: string
              description: Уникальный идентификатор альбома
            name:
              type: string
              description: Название альбома

    SimpleUser:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор пользователя
        name:
          type: string
          description: Имя пользователя
        avatar:
          type: string
          nullable: true
          description: URL аватара пользователя
        type:
          type: string
          enum:
            - User
          description: Тип сущности (всегда 'User')

    RecommendationItem:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор элемента рекомендации
        name:
          type: string
          description: Название элемента рекомендации
        image:
          type: string
          nullable: true
          description: URL изображения элемента
        description:
          type: string
          nullable: true
          description: Описание элемента
        color:
          type: string
          nullable: true
          description: Цвет, связанный с элементом
        type:
          $ref: '#/components/schemas/Entities'
          description: Тип элемента рекомендации (без 'Track')

    Recommendation:
      type: object
      properties:
        id:
          type: string
          description: Уникальный идентификатор рекомендации
        naming:
          type: string
          nullable: true
          description: Название рекомендации
        list:
          type: array
          items:
            $ref: '#/components/schemas/RecommendationItem'
          description: Список элементов, входящих в рекомендацию

    Discography:
      type: object
      properties:
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
          description: Список альбомов
        popularTracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
          description: Список популярных треков
        recommended:
          type: array
          items:
            $ref: '#/components/schemas/Recommendation'
          description: Список рекомендованных элементов

  responses:
    ResponseOK:
      description: Успешный ответ
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: OK
                description: Сообщение о статусе операции